user www www;  #modify
worker_processes auto;  #modify
pid /var/run/nginx.pid;  #modify
worker_rlimit_nofile 65536;

events {
    worker_connections  65536;
    multi_accept        on;
    use                 epoll;
}


http {
    # Setting log for Docker
    access_log /dev/stdout;
    error_log /dev/stdout info;

    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    client_max_body_size 100m;  #add
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  120;

    #gzip  on;

    # Adding Drupal Specific configurations
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    # Define Nginx MicroCache
    fastcgi_cache_path /dev/shm/microcache levels=1:2 keys_zone=MYAPP:5M max_size=256M inactive=2h loader_threshold=2592000000 loader_sleep=1 loader_files=100000;
    fastcgi_cache_key "$scheme$request_method$host$request_uri";

    # Allowing local environment to check nginx status
    geo $dont_show_nginx_status {
        default 1;
        127.0.0.1 0; # allow on the loopback
        172.16.0.0/20 0; # allow on an internal network
    }

    # Add Cache status into response header
    add_header X-Cache $upstream_cache_status;
    limit_conn_zone $binary_remote_addr zone=gulag:5m;
    map $http_cookie $cache_uid {
        default nil; # hommage to Lisp :)
        ~SESS[[:alnum:]]+=(?<session_id>[[:alnum:]]+) $session_id;
    }

    map $request_method $no_cache {
        default 1;
        HEAD 0;
        GET 0;
    }

    map $http_user_agent $is_bot {
        default  '';
        ~*crawl|goog|yahoo|yandex|spider|bot|tracker|click|parser is_bot;
    }

    ## Add here all user agents that are to be blocked.
    map $http_user_agent $bad_bot {
        default 0;
        ~*^Lynx 0; # Let Lynx go through
        libwww-perl                      1;
        ~(?i)(httrack|htmlparser|libwww) 1;
    }
    ## Add here all referrers that are to blocked.
    map $http_referer $bad_referer {
        default 0;
        ~(?i)(adult|babes|click|diamond|forsale|girl|jewelry|love|nudit|organic|poker|porn|poweroversoftware|sex|teen|webcam|zippo|casino|replica) 1;
    }

    ## Let Ajax calls go through.
    map $uri $no_cache_ajax {
        default 0;
        /system/ajax 1;
    }

    ## Testing for the session cookie being present. If there is then no
    ## caching is to be done. Note that this is for someone using either
    ## Drupal 7 pressflow or stock Drupal 6 core with no_anon
    ## (http://drupal.org/project/no_anon).
    map $http_cookie $no_cache_cookie {
        default 0;
        ~SESS 1; # PHP session cookie
    }

    ## Combine both results to get the cache bypassing mapping.
    map $no_cache_ajax$no_cache_cookie $no_cache {
        default 1;
        00 0;
    }

    server {
        listen       80;
        rewrite_log  on;
        fastcgi_keep_conn on;
        #server_name  localhost;
        #charset koi8-r;
        root   /var/www/html;
        index  index.php index.html index.htm;

        # Adding Access-Control-Allow-Origin to all request
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-CustomHeader,X-Requested-With,X-Mx-ReqToken' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;

        # Unset cache for default
        ##  Cache everything by default
        ## set $no_cache 0;

        #  Don't cache if the URL contains a query string
        if ($query_string != ""){
            set $no_cache 1;
        }
        #  Don't cache the following URLs
        if ($request_uri ~* "/(administrator/|admin/|login.php)"){
            set $no_cache 1;
        }
        #  Don't cache if there is a cookie called PHPSESSID
        if ($http_cookie = "PHPSESSID"){
            set $no_cache 1;
        }
        #  Block download agents ##
        if ($http_user_agent ~* LWP::Simple|BBBike|wget) {
            return 403;
        }
        #  Block all user agent
        if ($bad_bot) {
		        return 444;
	      }
        if ($bad_referer) {
		        return 444;
	      }

        #Block wordpress scan attack
        location ~ ^/(wp-admin|wp-login\.php) {
            deny all;
        }

        location = /favicon.ico {
            etag       off;
            log_not_found off;
            access_log off;
        }

        # This matters if you use drush
        location = /backup {
            deny all;
        }

        # Very rarely should these ever be accessed outside of your lan
        location ~* \.(txt|log)$ {
            deny all;
        }

        location ~ \..*/.*\.php$ {
            return 403;
        }

        location / {
            etag       off;
            # This is cool because no php is touched for static content

            try_files $uri @rewrite;
            #try_files $uri $uri/ /index.php?$args;
        }

        ## Disallow access to .git directories: return
        ## 404 as not to disclose information.
        location ^~ /.git {
            return 404;
        }

        ## Disallow access to patches directory.
        location ^~ /patches {
            return 404;
        }

        ## Disallow access to drush backup directory.
        location ^~ /backup {
            return 404;
        }

        location @rewrite {
            etag       off;
            # Some modules enforce no slash (/) at the end of the URL
            # Else this rewrite block wouldn't be needed (GlobalRedirect)
            rewrite ^/(.*)$ /index.php?q=$1;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        location ~ \.php$ {
            root           /var/www/html;
            fastcgi_pass   unix:/var/run/php-fpm-www.sock;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /$document_root$fastcgi_script_name;
            include        fastcgi_params;
            fastcgi_intercept_errors on;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_buffers 256 16k;
            fastcgi_buffer_size 128k;
            fastcgi_connect_timeout 300;
            fastcgi_send_timeout 300;
            fastcgi_read_timeout 300;
            fastcgi_cache MYAPP;
            fastcgi_cache_bypass $no_cache;
            fastcgi_no_cache $no_cache;

            # Set cache key to include identifying components
            fastcgi_cache_valid 200 301 60s;
            fastcgi_cache_valid 302     1m;
            fastcgi_cache_valid 404     1s;
            fastcgi_cache_min_uses 1;
            fastcgi_cache_use_stale error timeout invalid_header updating http_500;
            fastcgi_ignore_headers Cache-Control Expires;
            fastcgi_pass_header Set-Cookie;
            fastcgi_pass_header Cookie;

            ## Hide the X-Drupal-Cache header provided by Pressflow.
            fastcgi_hide_header 'X-Drupal-Cache';
            ## Hide the Drupal 7 header X-Generator.
            fastcgi_hide_header 'X-Generator';

            ## Add a cache miss/hit status header.
            add_header X-Micro-Cache $upstream_cache_status;

            # Adding Access-Control-Allow-Origin to all request
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-CustomHeader,X-Requested-With,X-Mx-ReqToken' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;

            ## To avoid any interaction with the cache control headers we expire
            ## everything on this location immediately.
            #expires epoch;
            etag       off;

            ## Cache locking mechanism for protecting the backend of too many
            ## simultaneous requests.
            fastcgi_cache_lock on;

            ## To avoid any interaction with the cache control headers we expire
            ## everything on this location immediately.
            expires epoch;
        }

        #  Catch image styles for D7.
        location ^~ /system/temporary/ {
            rewrite ^/system/temporary/(.*)$ /sites/default/files/$1 last;
        }

        #  Catch image styles for D7.
        location ~ ^/sites/.*/files/ {
            log_not_found off;
            expires 1y;
            add_header Pragma public;
            add_header Cache-Control "public, max-age=2592000";
            add_header locationheader 1;
            add_header X-Micro-Cache $upstream_cache_status;
            try_files $uri @rewrite;
        }

        location ~ ^/sites/.*/files/styles/.*/public/ {
          try_files $uri @rewrite;
        }

        location ~* ^(?!/system/files).*\.(js|css|png|jpg|jpeg|gif|ico|ttf|svg|woff)$ {
          ## If the image does not exist, maybe it must be generated by drupal (imagecache)
          try_files $uri @rewrite;
          expires 7d;
          log_not_found off;
        }

        ##
        ## Send all known bots to $args free URLs.
        ##
        location @nobots {
          if ($is_bot) {
            rewrite ^ $scheme://$host$uri? permanent;
          }
          rewrite ^/(.*)$  /index.php?q=$1 last;
        }

        ##
        ## Advagg_css and Advagg_js support.
        ##
        location ~* files/advagg_(?:css|js)/ {
          expires    max;
          etag       off;
          limit_conn gulag 32;
          rewrite    ^/files/advagg_(.*)/(.*)$ /sites/$server_name/files/advagg_$1/$2 last;
          add_header ETag '';
          add_header Accept-Ranges '';
          add_header Cache-Control "no-transform, public";
          add_header Last-Modified "Wed, 20 Jan 1988 04:20:42 GMT";
          add_header X-Header "AdvAgg Generator 1.0";
          set $nocache_details "Skip";
          try_files  $uri @nobots;
        }

        location ~* \.(?:js|css|png|jpg|jpeg|gif|ico|svg|xml)$ {
            #    add_header Content-Type "binary/octet-stream";
            log_not_found off;
            expires 1y;
            add_header Pragma public;
            add_header Cache-Control "public, max-age=2592000";
            add_header locationheader 1;
            add_header X-Micro-Cache $upstream_cache_status;
	        ## Set the OS file cache.
	        open_file_cache max=3000 inactive=120s;
	        open_file_cache_valid 45s;
	        open_file_cache_min_uses 2;
	        open_file_cache_errors off;
            try_files $uri @rewrite;
        }

        location ~* \.(otf|eot|ttf|woff) {
            expires 1y;
            add_header Cache-Control "public, max-age=2592000";
	        ## Set the OS file cache.
	        open_file_cache max=3000 inactive=120s;
	        open_file_cache_valid 45s;
	        open_file_cache_min_uses 2;
	        open_file_cache_errors off;
            try_files $uri @rewrite;
        }
    }

    #add
    ##########################vhost#####################################
    include vhost/*.conf;

}

daemon off;
